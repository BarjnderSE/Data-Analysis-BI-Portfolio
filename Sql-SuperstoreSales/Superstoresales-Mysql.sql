-- 1. Write a query to display all records from the supermarket_sales table.
SELECT * FROM ss;

-- 2. Retrieve all sales transactions from the branch 'A'.
SELECT * FROM ss WHERE branch = 'A';

-- 3. Display all sales records where the city is 'Yangon' and the customer_type is 'Member'.
SELECT * FROM ss WHERE city = 'Yangon' AND customer_type = 'Member';

-- 4. List all sales transactions sorted by total in descending order.
SELECT * FROM ss ORDER BY total DESC;

-- 5. Show the first 5 transactions that were paid by 'Cash'.
SELECT * FROM ss WHERE payment = 'Cash' LIMIT 5;

-- 6. Retrieve all sales that occurred between '2019-01-01' and '2019-03-31'.
SELECT * FROM ss WHERE date BETWEEN '2019-01-01' AND '2019-03-31';

-- 7. Find all records where the payment method is 'Ewallet'.
SELECT * FROM ss WHERE payment = 'Ewallet';

-- 8. Search for all sales transactions where the invoice_id starts with '750'.
SELECT * FROM ss WHERE invoice_id LIKE '750%';

-- 9. Count how many transactions were made by 'Normal' customers.
SELECT COUNT(*) AS transaction_count FROM ss WHERE customer_type = 'Normal';

-- 10. Count the number of sales made in each city.
SELECT branch, city, COUNT(*) AS total_count FROM ss GROUP BY branch, city;

-- 11. Calculate the total sales (total) generated by each branch.
SELECT branch, CEIL(SUM(total)) AS total_sales FROM ss GROUP BY branch;

-- 12. Find branches where the total sales exceeded 10,000.
SELECT branch, SUM(total) AS total_sales FROM ss GROUP BY branch HAVING CEIL(SUM(total)) > 10000;

-- 13. Show the average rating per product line.
SELECT product_line, AVG(rating) AS average_rating FROM ss GROUP BY product_line;

-- 14. Find the maximum and minimum gross_income for each customer_type.
SELECT customer_type, MAX(gross_income) AS max_income, MIN(gross_income) AS min_income FROM ss GROUP BY customer_type;

-- 15. Write a query to display the total sales (total) and the calculated profit (which is gross_income) for each sale, with proper aliasing.
SELECT 
    SUM(total) AS total_sales, 
    (SUM(total) - SUM(cost_amount)) AS gross_income 
FROM 
    ss 
GROUP BY 
    sale_id;  -- Note: Ensure `sale_id` exists in your table

-- 16. Extract the month from the date field and show total sales grouped by month.
SELECT 
    MONTH(date) AS sale_month, 
    SUM(total) AS total_sales 
FROM 
    ss 
GROUP BY 
    MONTH(date) 
ORDER BY 
    sale_month;

-- 17. Write a query to display all transactions where the total is greater than the average total sales of all transactions.
SELECT * 
FROM ss 
WHERE total > (SELECT AVG(total) FROM ss);


